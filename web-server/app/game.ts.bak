/// <reference path="../typings/pixi.js/pixi.js.d.ts" />
import BackgroundGaussianBlur from "../class/BackgroundGaussianBlur";
import SVGGraphics from "../class/SVGGraphics";
import TWEEN, {Tween} from "../class/Tween";
import When from "../class/When";
import FlowLayout from "../class/FlowLayout";
import TextBuilder from "../class/TextBuilder";
import pixelCollision from "../class/pixelCollision";

import Dialog from "./Dialog";
import {Mask, MaskFactory} from "./Mask";
import Flyer from "./class/Flyer";
import Ship from "./class/Ship";
import Wall from "./class/Wall";
import Bullet from "./class/Bullet";

import Collision from "./engine/Collision";
import Victor from "./engine/Victor";
import {engine} from "./engine/main";
import QuadTree, { Node, BoundsNode} from "./engine/QuadTree";
import {pomelo} from "./engine/Pomelo";

import {
    VIEW,
    L_ANI_TIME,
    B_ANI_TIME,
    M_ANI_TIME,
    S_ANI_TIME,
    on,
    square,
    stageManager,
    renderer,
    pt2px,
    emitReisze
} from "./common";


const ani_ticker = new PIXI.ticker.Ticker();
const ani_tween = new TWEEN();
const jump_tween = new TWEEN();
const FPS_ticker = new PIXI.ticker.Ticker();

export const current_stage_wrap = new PIXI.Container();
export const current_stage = new PIXI.Graphics();
current_stage_wrap.addChild(current_stage);
current_stage_wrap["keep_direction"] = "horizontal";
//加载图片资源
export const loader = new PIXI.loaders.Loader();

loader.add("button", "./res/game_0001_提示按钮.png")

loader.load();

const loading_text = new PIXI.Text("游戏加载中……", { font: pt2px(25) + "px 微软雅黑", fill: "#FFF" });
current_stage.addChild(loading_text);

loader.once("complete", renderInit);

function renderInit(loader: PIXI.loaders.Loader, resource: PIXI.loaders.ResourceDictionary) {
    for (var i = 0, len = current_stage.children.length; i < len; i += 1) {
        current_stage.removeChildAt(0)
    }
    /**素材加载
     * 初始化场景
     */
    current_stage.on("resize", function () {
        current_stage.clear();
        current_stage.beginFill(0x333ddd,0.5);
        current_stage.drawRect(0, 0, VIEW.WIDTH, VIEW.HEIGHT);
        current_stage.endFill();
    });
    function addToEngineAndState(item: Collision) {
        current_stage.addChild(item);
        engine.add(item);
    }
    engine.init(VIEW.WIDTH, VIEW.HEIGHT);
    const flyers = [];
    for (var i = 0; i < 0; i += 1) {
        var flyer = new Flyer({
            x: Math.random() * VIEW.WIDTH,
            y: Math.random() * VIEW.HEIGHT,
            x_speed: (0.5 - Math.random()) * 4,
            y_speed: (0.5 - Math.random()) * 4,
            // body_color: ~~(Math.random() * 0xffffff)
        });
        flyers.push(flyer);
        addToEngineAndState(flyer);
    }
    var flyer = new Flyer({
        x: 460,
        y: 250,
        x_speed: 1,
        y_speed: 0,
        body_color: 0x0f00dd
    });
    flyers.push(flyer);
    addToEngineAndState(flyer);
    var flyer = new Flyer({
        x: 480,
        y: 250,
        x_speed: 0,
        y_speed: 0,
        body_color: 0x0fdd00
    });
    flyers.push(flyer);
    addToEngineAndState(flyer);
    var flyer = new Flyer({
        x: 500,
        y: 250,
        x_speed: -1,
        y_speed: 0,
        body_color: 0xdd000f
    });
    flyers.push(flyer);
    addToEngineAndState(flyer);

    // 四边限制
    var top_edge = new Wall({
        x: 0, y: 0,
        width: VIEW.WIDTH,
        height: 10
    });
    addToEngineAndState(top_edge);
    var bottom_edge = new Wall({
        x: 0, y: VIEW.HEIGHT - 10,
        width: VIEW.WIDTH,
        height: 10
    });
    addToEngineAndState(bottom_edge);
    var left_edge = new Wall({
        x: 0, y: 0,
        width: 10,
        height: VIEW.HEIGHT
    });
    addToEngineAndState(left_edge);
    var right_edge = new Wall({
        x: VIEW.WIDTH - 10, y: 0,
        width: 10,
        height: VIEW.HEIGHT
    });
    addToEngineAndState(right_edge);
    (() => {
        var x_len = 0;
        var y_len = 0;
        var x_unit = VIEW.WIDTH / (x_len + 1)
        var y_unit = VIEW.HEIGHT / (y_len + 1)
        var width = 40;
        for (var _x = 1; _x <= x_len; _x += 1) {
            for (var _y = 1; _y <= y_len; _y += 1) {
                var mid_edge = new Wall({
                    x: _x * x_unit - width / 2, y: _y * y_unit - width / 2,
                    width: width,
                    height: width
                });
                addToEngineAndState(mid_edge);
            }
        }
    })();

    var bullets = new PIXI.Container();
    current_stage.addChild(bullets);
    //我的飞船
    var my_ship = new Ship({
        x: VIEW.CENTER.x,
        y: VIEW.CENTER.y,
    });
    addToEngineAndState(my_ship);



    /**初始化动画
     * 
     */
    var pre_time
    ani_ticker.add(() => {
        pre_time || (pre_time = performance.now());
        var cur_time = performance.now();
        var dif_time = cur_time - pre_time;
        //基本运动
        flyers.forEach(puluo => {
            puluo.update(dif_time)
        });
        // 碰撞检测
        engine.update(dif_time);
        // 弹道运动
        bullets.children.forEach((bullet: Bullet) => {
            bullet.update(dif_time);
        })
    });
    // 绘制辅助线
    var tree_view = new PIXI.Graphics();
    current_stage.addChild(tree_view)
    ani_ticker.add(() => {
        tree_view.clear();
        tree_view.lineStyle(1, 0x000000, 1);
        var root_node = engine.tree.root;
        function _drawNodes(root: Node) {
            var bounds = root._bounds;
            tree_view.drawRect(bounds.x, bounds.y, bounds.width, bounds.height);
            root.nodes.forEach(_drawNodes)
        }
        _drawNodes(root_node);
    });

    /**按钮事件
     * 
     */


    /**交互动画
     * 
     */
    on(current_stage, "click|tap", function () {
        var bullet = my_ship.fire();
        bullets.addChild(bullet);
        engine.add(bullet);
    });
    on(current_stage, "mousemove|click|tap", function (e) {
        var to_point = VIEW.rotateXY(e.data.global);
        var direction = new Victor(to_point.x - VIEW.CENTER.x, to_point.y - VIEW.CENTER.y);
        my_ship.setConfig({ rotation: direction.angle() })
    });
    // setTimeout(function () {
    //     rule.close();
    // }, 3000)

    // 动画控制器
    ani_ticker.add(() => {
        ani_tween.update();
        jump_tween.update();
    });

    /**帧率
     * 
     */
    var FPS_Text = new PIXI.Text("FPS:0", { font: '24px Arial', fill: 0x00ffff33, align: "right" });

    current_stage_wrap.addChild(FPS_Text);
    FPS_ticker.add(function () {
        FPS_Text.text = "FPS:" + FPS_ticker.FPS.toFixed(2) + " W:" + VIEW.WIDTH + " H:" + VIEW.HEIGHT;
    });

    // 触发布局计算
    emitReisze(current_stage_wrap);

    init_w.ok(0, []);
}
current_stage_wrap.on("init", initStage);
current_stage_wrap.on("reinit", function () {
    renderInit(loader, loader.resources);
    emitReisze(current_stage);
});
current_stage_wrap["_has_custom_resize"] = true;
current_stage_wrap.on("resize", function () {
    jump_tween.clear();
    ani_tween.clear();
    emitReisze(this);
});

const init_w = new When(2, () => {
    emitReisze(current_stage);
    ani_tween.start();
    jump_tween.start();
    ani_ticker.start();
    FPS_ticker.start();
});
export function initStage() {
    init_w.ok(1, []);
}

